from django.shortcuts import get_object_or_404
from django.contrib import messages
from article.models import Cuser, Articles
from django.core.paginator import Paginator
from collections import Counter
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.template.loader import render_to_string


# -------------------- Register --------------------
def register(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        email = request.POST.get('email')
        password = request.POST.get('password')
        phone = request.POST.get('phone')

        # Check for existing email
        if Cuser.objects.filter(email=email).exists():
            return JsonResponse({"success": False, "message": "Email already registered!"})

        # Check for existing username
        if Cuser.objects.filter(username=name).exists():
            return JsonResponse({"success": False, "message": "Username already taken!"})

        # Create user
        user = Cuser(username=name, email=email, phone=phone)
        user.set_password(password)
        user.save()

        return JsonResponse({"success": True, "message": "Registration successful!", "redirect": "login"})

    # GET → return HTML as JSON
    html = render_to_string('register.html', {}, request=request)
    return JsonResponse({"success": True, "html": html})


# -------------------- Login --------------------
def login(request):
    if request.user.is_authenticated:
        return JsonResponse({"success": False, "message": "You are already logged in.", "redirect": "article"})

    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        user = None
        try:
            user_obj = Cuser.objects.get(email=email)
            user = authenticate(request, username=user_obj.username, password=password)
        except Cuser.DoesNotExist:
            pass

        if user:
            auth_login(request, user)
            return JsonResponse({"success": True, "message": "Login successful!", "redirect": "article"})
        else:
            return JsonResponse({"success": False, "message": "Invalid email or password."})

    # GET → return HTML as JSON
    html = render_to_string('login.html', {}, request=request)
    return JsonResponse({"success": True, "html": html})


# -------------------- Logout --------------------
def logout(request):
    auth_logout(request)
    return JsonResponse({"success": True, "message": "You have been logged out.", "redirect": "article"})


# -------------------- Article List --------------------
def article(request):
    user = request.user if request.user.is_authenticated else None

    # Get all published articles
    articles_qs = Articles.objects.filter(is_draft=False).select_related('author').order_by('-created_at')
    paginator = Paginator(articles_qs, 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    processed_articles = [
        {
            'id': art.id,
            'title': art.title,
            'content': art.content,
            'tags': art.tags,
            'tag_list': [tag.strip() for tag in art.tags.split(',') if tag.strip()],
            'author_name': art.author.username,
            'created_at': art.created_at.strftime("%Y-%m-%d %H:%M"),
        }
        for art in page_obj
    ]

    # Tags for sidebar
    all_tags_flat = []
    for art in Articles.objects.filter(is_draft=False):
        all_tags_flat.extend([tag.strip() for tag in art.tags.split(',') if tag.strip()])
    tag_counts_list = sorted(Counter(all_tags_flat).items())

    has_drafts = Articles.objects.filter(author=user, is_draft=True).exists() if user else False

    context = {
        'articles': processed_articles,
        'user_name': user.username if user else None,
        'is_logged_in': bool(user),
        'all_tags': sorted(set(all_tags_flat)),
        'tag_counts_list': tag_counts_list,
        'page_obj': page_number,
        'has_drafts': has_drafts,
        'no_drafts': not has_drafts,
    }

    html = render_to_string('article.html', context, request=request)
    return JsonResponse({"success": True, "html": html, "data": context})


# -------------------- Save/Add/Edit Article --------------------
@login_required(login_url='login')
def save_article(request, article_id=None):
    user = request.user
    article = get_object_or_404(Articles, id=article_id, author=user) if article_id else None

    if request.method == 'POST':
        action = request.POST.get('action')  # publish / draft / delete / cancel
        title = request.POST.get('title')
        content = request.POST.get('content')
        tags = request.POST.get('tags')

        # Cancel button
        if action == 'cancel':
            redirect_to = 'draft_article' if article and article.is_draft else 'article'
            return JsonResponse({'success': True, 'redirect': redirect_to})

        # Delete
        if action == 'delete' and article:
            article.delete()
            return JsonResponse({'success': True, 'message': "Article deleted!", 'redirect': 'draft_article'})

        # Draft or Publish
        is_draft = (action == 'draft')

        if article:
            article.title = title
            article.content = content
            article.tags = tags
            article.is_draft = is_draft
            article.save()
        else:
            article = Articles.objects.create(
                title=title,
                content=content,
                tags=tags,
                author=user,
                is_draft=is_draft
            )

        return JsonResponse({
            'success': True,
            'message': "Draft saved!" if is_draft else "Article published successfully!",
            'redirect': 'draft_article' if is_draft else 'article'
        })

    # GET → return HTML as JSON
    html = render_to_string('add_article.html', {'article': article}, request=request)
    return JsonResponse({"success": True, "html": html})


# -------------------- Draft Articles --------------------
@login_required(login_url='login')
def draft_article(request):
    drafts_qs = Articles.objects.filter(author=request.user, is_draft=True).order_by('-created_at')
    has_drafts = drafts_qs.exists()

    processed_drafts = [
        {
            'id': art.id,
            'title': art.title,
            'content': art.content,
            'tags': art.tags,
            'tag_list': [tag.strip() for tag in art.tags.split(',') if tag.strip()],
            'author_name': art.author.username,
            'created_at': art.created_at.strftime("%Y-%m-%d %H:%M"),
        }
        for art in drafts_qs
    ]

    context = {
        'articles': processed_drafts,
        'is_logged_in': True,
        'user_name': request.user.username,
        'is_draft_page': True,
        'has_drafts': has_drafts,
        'no_drafts': not has_drafts,
    }

    html = render_to_string('draft_article.html', context, request=request)
    return JsonResponse({"success": True, "html": html, "data": context})


# -------------------- Tags --------------------
def tags(request, tag):
    user = request.user if request.user.is_authenticated else None

    all_articles = Articles.objects.filter(is_draft=False).select_related('author')
    all_tags_flat = []
    matched_articles = []
    normalized_tag = tag.lower()

    for article in all_articles:
        tag_list = [t.strip() for t in article.tags.split(',') if t.strip()]
        all_tags_flat.extend(tag_list)
        if normalized_tag in [t.lower() for t in tag_list]:
            matched_articles.append({
                'id': article.id,
                'title': article.title,
                'content': article.content,
                'tags': article.tags,
                'tag_list': tag_list,
                'author_name': article.author.username,
                'created_at': article.created_at.strftime("%Y-%m-%d %H:%M"),
            })

    tag_counts_list = sorted(Counter(all_tags_flat).items())

    context = {
        'articles': matched_articles,
        'user_name': user.username if user else None,
        'is_logged_in': user is not None,
        'selected_tag': tag,
        'all_tags': sorted(set(all_tags_flat)),
        'tag_counts_list': tag_counts_list,
    }

    html = render_to_string('article.html', context, request=request)
    return JsonResponse({"success": True, "html": html, "data": context})
